# Create your views here.
 #This was was generated by wsdl2py, try to not edit.
from configuration import GetConfig, LogInput
from soapbox import soap
from soapbox import xsd
from soapbox.xsd import UNBOUNDED
from handle_in_message import HandleIncomingMessage

## This is for sending soap messages SUDS
from sendsoap import send_parse_save
###


class ServiceType(xsd.String):
	pattern = r"[MFS]{1}"

class MessageCode(xsd.String):
	enumeration = [ "MessageAck",  "NpRequest",  "NpRequestAck",  "NpRequestAccept",  "NpRequestReject",  "NpRequestCancel",  "NpExecute",  "NpExecuteBroadcast",  "NpExecuteComplete",  "NpDeactivate",  "NpDeactivateAck",  "NpDeactivateBroadcast",  "NpDeactivateComplete",  "NpQuery",  "NpQueryComplete",  "NpBillingResolution",  "NpBillingResolutionEnd",  "NpBillingResolutionReceived",  "NpBillingResolutionAlert",  "NpBillingResolutionAlertReceived",  "ErrorNotification", ]


class Number(xsd.String):
	pattern = r"[0-9]{5}|[0-9]{8}"

class SubmissionID(xsd.String):
	pattern = r"[A-Z]{4}-[0-9]{4}-[0-9]{8}"

class PortID(xsd.String):
	pattern = r"[A-Z]{4}-[A-Z]{4}-[0-9]{8}-[0-9]{5}"

class OperatorID(xsd.String):
	pattern = r"[A-Z0-9]{4}"

class RoutingNumber(xsd.String):
	pattern = r"[ab]{1}[0-9]{2}"

class RejectCode(xsd.String):
	pattern = r"REJ[0-9]{4}"

class ErrorCode(xsd.String):
	pattern = r"ERR[0-9]{4}"

class SimCardNumber(xsd.String):
	pattern = r"89[0-9]{16,17}"

class CompanyFlag(xsd.String):
	pattern = r"[YN]{1}"

class CPR(xsd.String):
	pattern = r"[0-9]{9}"

class CommercialRegNumber(xsd.String):
	pattern = r"[0-9]{1,7}[/][0-9]{1,2}"

class PassportNumber(xsd.String):
	pattern = r"[0-9A-Za-z]{5,12}"

class ResolutionLevel(xsd.String):
	enumeration = [ "LEVEL1",  "LEVEL2",  "LEVEL3", ]


class Comments(xsd.String):
	pattern = r"[.]{0,100}"





class AccessFault_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ErrorCode = xsd.Element(xsd.String, minOccurs=0)
	Description = xsd.Element(xsd.String, minOccurs=0)

	@classmethod
	def create(cls, ):
		instance = cls()
		return instance


class TechnicalFault_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ErrorCode = xsd.Element(xsd.String, minOccurs=0)
	Description = xsd.Element(xsd.String, minOccurs=0)

	@classmethod
	def create(cls, ):
		instance = cls()
		return instance


class MessageAck_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	PortID = xsd.Element("PortID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,PortID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.PortID = PortID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpRequest_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID", minOccurs=0)
	SubmissionID = xsd.Element("SubmissionID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	SimCardNumber = xsd.Element("SimCardNumber", minOccurs=0)
	CompanyFlag = xsd.Element("CompanyFlag")
	CPR = xsd.Element("CPR", minOccurs=0)
	CommercialRegNumber = xsd.Element("CommercialRegNumber", minOccurs=0)
	PassportNumber = xsd.Element("PassportNumber", minOccurs=0)
	Comments = xsd.Element(xsd.String, minOccurs=0)
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,SubmissionID,DonorID,RecipientID,CompanyFlag,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.SubmissionID = SubmissionID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.CompanyFlag = CompanyFlag
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpRequestAccept_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	SubmissionID = xsd.Element("SubmissionID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,SubmissionID,DonorID,RecipientID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.SubmissionID = SubmissionID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpRequestReject_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	SubmissionID = xsd.Element("SubmissionID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	RejectCode = xsd.Element("RejectCode")
	Comments = xsd.Element(xsd.String, minOccurs=0)
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,SubmissionID,DonorID,RecipientID,RejectCode,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.SubmissionID = SubmissionID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.RejectCode = RejectCode
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpRequestCancel_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	SubmissionID = xsd.Element("SubmissionID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,SubmissionID,DonorID,RecipientID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.SubmissionID = SubmissionID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance

## Added by Hazim to able to send it
class NpExecute_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,RecipientID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpExecuteComplete_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,RecipientID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpDeactivateComplete_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	BlockID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,SubscriptionNetworkID,BlockID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.BlockID = BlockID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpBillingResolution_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,SubscriptionNetworkID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpBillingResolutionReceived_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,SubscriptionNetworkID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpBillingResolutionEnd_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,SubscriptionNetworkID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpBillingResolutionAlert_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	ResolutionLevel = xsd.Element("ResolutionLevel")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,SubscriptionNetworkID,ResolutionLevel,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.ResolutionLevel = ResolutionLevel
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpBillingResolutionAlertReceived_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,SubscriptionNetworkID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class ErrorNotification_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	MessageCode = xsd.Element("MessageCode")
	PortID = xsd.Element("PortID", minOccurs=0)
	RejectedMessageCode = xsd.Element("MessageCode")
	ErrorCode = xsd.Element("ErrorCode")
	Comments = xsd.Element(xsd.String, minOccurs=0)
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,MessageCode,RejectedMessageCode,ErrorCode,OriginationID,DestinationID, ):
		instance = cls()
		instance.MessageCode = MessageCode
		instance.RejectedMessageCode = RejectedMessageCode
		instance.ErrorCode = ErrorCode
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance

## Added by Hazim, it wasn't included in the original wsdl file

class NpRequestAck_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	SubmissionID = xsd.Element("SubmissionID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,SubmissionID,DonorID,RecipientID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.SubmissionID = SubmissionID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance



class NpDeactivateAck_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	BlockID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,SubscriptionNetworkID,BlockID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.BlockID = BlockID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance

######################

Schema8d8ea = xsd.Schema(
	name = "commontypes",  # Changed by Hazim, it was "ns8d8ea", both worked ns8d8ea is the originally generated from wsdl2py
	imports = [],
	targetNamespace = "http://np.systor.st/commontypes",
	location = "nptypes.xsd",
	elementFormDefault = "qualified",
	simpleTypes = [ ServiceType, MessageCode, Number, SubmissionID, PortID, OperatorID, RoutingNumber, RejectCode, ErrorCode, SimCardNumber, CompanyFlag, CPR, CommercialRegNumber, PassportNumber, ResolutionLevel, Comments,],
	attributeGroups = [],
	groups = [],
	complexTypes = [ AccessFault_Type, TechnicalFault_Type, MessageAck_Type, NpRequest_Type, NpRequestAccept_Type, NpRequestReject_Type, NpRequestCancel_Type, NpExecuteComplete_Type, NpDeactivateComplete_Type, NpBillingResolution_Type, NpBillingResolutionReceived_Type, NpBillingResolutionEnd_Type, NpBillingResolutionAlert_Type, NpBillingResolutionAlertReceived_Type, ErrorNotification_Type,],
	elements = {  "AccessFault":xsd.Element("AccessFault_Type"), "TechnicalFault":xsd.Element("TechnicalFault_Type"),})






class NpExecuteBroadcast_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	DonorID = xsd.Element("OperatorID")
	RecipientID = xsd.Element("OperatorID")
	NewRoute = xsd.Element("RoutingNumber")
	PortingDatetime = xsd.Element(xsd.DateTime)
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,DonorID,RecipientID,NewRoute,PortingDatetime,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.DonorID = DonorID
		instance.RecipientID = RecipientID
		instance.NewRoute = NewRoute
		instance.PortingDatetime = PortingDatetime
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpDeactivateBroadcast_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	ServiceType = xsd.Element("ServiceType")
	MessageCode = xsd.Element("MessageCode")
	Number = xsd.Element("Number")
	PortID = xsd.Element("PortID")
	SubscriptionNetworkID = xsd.Element("OperatorID")
	BlockID = xsd.Element("OperatorID")
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,ServiceType,MessageCode,Number,PortID,SubscriptionNetworkID,BlockID,OriginationID,DestinationID, ):
		instance = cls()
		instance.ServiceType = ServiceType
		instance.MessageCode = MessageCode
		instance.Number = Number
		instance.PortID = PortID
		instance.SubscriptionNetworkID = SubscriptionNetworkID
		instance.BlockID = BlockID
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance


class NpQueryComplete_Type(xsd.ComplexType):
	INHERITANCE = None
	INDICATOR = xsd.Sequence
	MessageCode = xsd.Element("MessageCode")
	Comments = xsd.Element(xsd.String)
	OriginationID = xsd.Element("OperatorID")
	DestinationID = xsd.Element("OperatorID")

	@classmethod
	def create(cls,MessageCode,Comments,OriginationID,DestinationID, ):
		instance = cls()
		instance.MessageCode = MessageCode
		instance.Comments = Comments
		instance.OriginationID = OriginationID
		instance.DestinationID = DestinationID
		return instance



Schemaa8fc8 = xsd.Schema(
	name = "nsa8fc8",
	imports = [Schema8d8ea,],
	targetNamespace = "http://np.systor.st/sp",
	elementFormDefault = "qualified",
	simpleTypes = [],
	attributeGroups = [],
	groups = [],
	complexTypes = [ NpExecuteBroadcast_Type, NpDeactivateBroadcast_Type, NpQueryComplete_Type, NpRequestAck_Type, NpDeactivateAck_Type,],
	elements = {  "MessageAck":xsd.Element("MessageAck_Type"), "NpRequest":xsd.Element("NpRequest_Type"), "NpRequestAccept":xsd.Element("NpRequestAccept_Type"), "NpRequestReject":xsd.Element("NpRequestReject_Type"), "NpRequestCancel":xsd.Element("NpRequestCancel_Type"), "NpExecuteBroadcast":xsd.Element("NpExecuteBroadcast_Type"), "NpExecuteComplete":xsd.Element("NpExecuteComplete_Type"), "NpDeactivateBroadcast":xsd.Element("NpDeactivateBroadcast_Type"), "NpDeactivateComplete":xsd.Element("NpDeactivateComplete_Type"), "NpQueryComplete":xsd.Element("NpQueryComplete_Type"), "NpBillingResolution":xsd.Element("NpBillingResolution_Type"), "NpBillingResolutionEnd":xsd.Element("NpBillingResolutionEnd_Type"), "NpBillingResolutionReceived":xsd.Element("NpBillingResolutionReceived_Type"), "NpBillingResolutionAlert":xsd.Element("NpBillingResolutionAlert_Type"), "NpBillingResolutionAlertReceived":xsd.Element("NpBillingResolutionAlertReceived_Type"), "ErrorNotification":xsd.Element("ErrorNotification_Type"), "NpRequestAck":xsd.Element("NpRequestAck_Type"), "NpDeactivateAck":xsd.Element("NpDeactivateAck_Type"),})



def HandleNpRequest(request,NpRequest):
	#Put your implementation here.
	messageCode = NpRequest.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpRequest)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpRequest)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpRequest_method = xsd.Method(function = HandleNpRequest,
	soapAction = "",
	input = "NpRequest",#Pointer to Schema.elements
	inputPartName = "npReq",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpRequest",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpRequestAccept(request,NpRequestAccept):
	#Put your implementation here.
	messageCode = NpRequestAccept.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpRequestAccept)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpRequestAccept)
	
	## Sending NpExecute
	ActUponNpRequestAccept(NpRequestAccept)
	#LogInput('Done with ActUponNpRequestAccept')

	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpRequestAccept_method = xsd.Method(function = HandleNpRequestAccept,
	soapAction = "",
	input = "NpRequestAccept",#Pointer to Schema.elements
	inputPartName = "npReqAcc",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpRequestAccept",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpRequestReject(request,NpRequestReject):
	#Put your implementation here.
	messageCode = NpRequestReject.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpRequestReject)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpRequestReject)
	
	## Updating our database with New to N
	ActUponNpRequestReject(NpRequestReject)
	#LogInput('Done with ActUponNpRequestReject')

	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpRequestReject_method = xsd.Method(function = HandleNpRequestReject,
	soapAction = "",
	input = "NpRequestReject",#Pointer to Schema.elements
	inputPartName = "npReqRej",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpRequestReject",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpRequestCancel(request,NpRequestCancel):
	#Put your implementation here.
	messageCode = NpRequestCancel.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpRequestCancel)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpRequestCancel)
	
	## Updating our database with New to N
	ActUponNpRequestCancel(NpRequestCancel)
	#LogInput('Done with ActUponNpRequestCancel')

	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpRequestCancel_method = xsd.Method(function = HandleNpRequestCancel,
	soapAction = "",
	input = "NpRequestCancel",#Pointer to Schema.elements
	inputPartName = "npReqCan",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpRequestCancel",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpExecuteBroadcast(request,NpExecuteBroadcast):
	#Put your implementation here.
	messageCode = NpExecuteBroadcast.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpExecuteBroadcast)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpExecuteBroadcast)
	
	## Sending NpExecuteComplete and Updating routing Table
	ActUponNpExecuteBroadcast(NpExecuteBroadcast)
	#LogInput('Done with ActUponNpExecuteBroadcast')
	
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpExecuteBroadcast_method = xsd.Method(function = HandleNpExecuteBroadcast,
	soapAction = "",
	input = "NpExecuteBroadcast",#Pointer to Schema.elements
	inputPartName = "npEx",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpExecuteBroadcast",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpExecuteComplete(request,NpExecuteComplete):
	#Put your implementation here.
	messageCode = NpExecuteComplete.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpExecuteComplete)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpExecuteComplete)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpExecuteComplete_method = xsd.Method(function = HandleNpExecuteComplete,
	soapAction = "",
	input = "NpExecuteComplete",#Pointer to Schema.elements
	inputPartName = "npExComp",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpExecuteComplete",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpDeactivateBroadcast(request,NpDeactivateBroadcast):
	#Put your implementation here.
	messageCode = NpDeactivateBroadcast.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpDeactivateBroadcast)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpDeactivateBroadcast)
	
	## Sending NpExecuteComplete and Updating routing Table
	ActUponNpDeactivateBroadcast(NpDeactivateBroadcast)
	#LogInput('Done with ActUponNpExecuteBroadcast')

	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpDeactivateBroadcast_method = xsd.Method(function = HandleNpDeactivateBroadcast,
	soapAction = "",
	input = "NpDeactivateBroadcast",#Pointer to Schema.elements
	inputPartName = "npDeact",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpDeactivateBroadcast",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpDeactivateComplete(request,NpDeactivateComplete):
	#Put your implementation here.
	messageCode = NpDeactivateComplete.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpDeactivateComplete)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpDeactivateComplete)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpDeactivateComplete_method = xsd.Method(function = HandleNpDeactivateComplete,
	soapAction = "",
	input = "NpDeactivateComplete",#Pointer to Schema.elements
	inputPartName = "npDeactComp",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpDeactivateComplete",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpQueryComplete(request,NpQueryComplete):
	#Put your implementation here.
	messageCode = NpQueryComplete.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpQueryComplete)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpQueryComplete)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpQueryComplete_method = xsd.Method(function = HandleNpQueryComplete,
	soapAction = "",
	input = "NpQueryComplete",#Pointer to Schema.elements
	inputPartName = "npQueryComp",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpQueryComplete",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpBillingResolution(request,NpBillingResolution):
	#Put your implementation here.
	messageCode = NpBillingResolution.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpBillingResolution)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpBillingResolution)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpBillingResolution_method = xsd.Method(function = HandleNpBillingResolution,
	soapAction = "",
	input = "NpBillingResolution",#Pointer to Schema.elements
	inputPartName = "npBill",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpBillingResolution",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpBillingResolutionReceived(request,NpBillingResolutionReceived):
	#Put your implementation here.
	messageCode = NpBillingResolutionReceived.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpBillingResolutionReceived)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpBillingResolutionReceived)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpBillingResolutionReceived_method = xsd.Method(function = HandleNpBillingResolutionReceived,
	soapAction = "",
	input = "NpBillingResolutionReceived",#Pointer to Schema.elements
	inputPartName = "npBillRec",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpBillingResolutionReceived",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpBillingResolutionEnd(request,NpBillingResolutionEnd):
	#Put your implementation here.
	messageCode = NpBillingResolutionEnd.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpBillingResolutionEnd)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpBillingResolutionEnd)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpBillingResolutionEnd_method = xsd.Method(function = HandleNpBillingResolutionEnd,
	soapAction = "",
	input = "NpBillingResolutionEnd",#Pointer to Schema.elements
	inputPartName = "npBillEnd",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpBillingResolutionEnd",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpBillingResolutionAlert(request,NpBillingResolutionAlert):
	#Put your implementation here.
	messageCode = NpBillingResolutionAlert.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpBillingResolutionAlert)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpBillingResolutionAlert)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpBillingResolutionAlert_method = xsd.Method(function = HandleNpBillingResolutionAlert,
	soapAction = "",
	input = "NpBillingResolutionAlert",#Pointer to Schema.elements
	inputPartName = "npBillAlert",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpBillingResolutionAlert",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleNpBillingResolutionAlertReceived(request,NpBillingResolutionAlertReceived):
	#Put your implementation here.
	messageCode = NpBillingResolutionAlertReceived.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(NpBillingResolutionAlertReceived)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(NpBillingResolutionAlertReceived)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)
	return MessageAck

HandleNpBillingResolutionAlertReceived_method = xsd.Method(function = HandleNpBillingResolutionAlertReceived,
	soapAction = "",
	input = "NpBillingResolutionAlertReceived",#Pointer to Schema.elements
	inputPartName = "npBillAlertRec",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleNpBillingResolutionAlertReceived",
	faults = [
	xsd.Response(name="ErrorNotification",element="ErrorNotification",partName="error"),]
	)




def HandleErrorNotification(request,ErrorNotification):
	#Put your implementation here.
	messageCode = ErrorNotification.MessageCode
	LogInput('___________________________  Incoming %s  ___________________________' % messageCode)

	# Store incoming message to Database
	HandleIncomingMessage(ErrorNotification)

	# Storing the Outgoing message to database
	MessageAck = SetMessageAck(ErrorNotification)
	## Return NpRequestAck to CS
	LogInput('___________________________  END of %s  ___________________________' % messageCode)

	return MessageAck


HandleErrorNotification_method = xsd.Method(function = HandleErrorNotification,
	soapAction = "",
	input = "ErrorNotification",#Pointer to Schema.elements
	inputPartName = "error",
	output = "MessageAck",#Pointer to Schema.elements
	outputPartName = "ack",
	operationName = "HandleErrorNotification",
	faults = []
	)



SpSoap_SERVICE = soap.Service(
	name = "SpSoap",
	targetNamespace = "http://np.systor.st/sp",
	location = "http://www.nport.bh/services/SpService",
	schema = Schemaa8fc8,
	version = soap.SOAPVersion.SOAP11,
	methods = [HandleNpRequest_method,HandleNpRequestAccept_method,HandleNpRequestReject_method,HandleNpRequestCancel_method,HandleNpExecuteBroadcast_method,HandleNpExecuteComplete_method,HandleNpDeactivateBroadcast_method,HandleNpDeactivateComplete_method,HandleNpQueryComplete_method,HandleNpBillingResolution_method,HandleNpBillingResolutionReceived_method,HandleNpBillingResolutionEnd_method,HandleNpBillingResolutionAlert_method,HandleNpBillingResolutionAlertReceived_method,HandleErrorNotification_method, ])


#Uncomment this lines to turn on dispatching.
from django.views.decorators.csrf import csrf_exempt
dispatch = csrf_exempt(soap.get_django_dispatch(SpSoap_SERVICE))

#Put this lines in your urls.py:
#urlpatterns += patterns('',
#	(r"^services/SpService$", "<fill the module path>.dispatch")
#)

# Database work - importing NpMessages model from the form app
# from save_send_reply import HandleIncomingMessage, SetMessageAck, SetNpRequestAck, SetNpDeactivateAck
# NpMessages is used to store in the database and create a form at the same time.
from web.models import NpMessages
import datetime

# Storing the outgoing MessageAck message to database function and returning formed MessageAck
def SetMessageAck(InMessage):
	MessageAck = MessageAck_Type()

	#LogInput('Starting new MessageAck')

	## setting the default ServiceType if it wasn't sent by the message
	try:
		MessageAck.ServiceType = InMessage.ServiceType

	except:
		MessageAck.ServiceType = "F"

	MessageAck.MessageCode = "MessageAck"	#set for everyone to the type of message sent out MessageAck
	MessageAck.PortID = InMessage.PortID
	MessageAck.OriginationID = GetConfig('ORIGINATION_ID')
	MessageAck.DestinationID = GetConfig('DESTINATION_ID')

	# set variables to be stored in the data base
	MessageAckToDB = NpMessages(
							time_stamp = datetime.datetime.now(),			# Generated by us to know when we sent this message
							service_type = MessageAck.ServiceType,		#
							message_code = MessageAck.MessageCode,		#
							port_id = MessageAck.PortID,
							origination_id = MessageAck.OriginationID,	# This mandatory and it is sent with NpRequest by CS
							destination_id = MessageAck.DestinationID,	# This mandatory and it is sent with NpRequest by CS
							direction = "OUT",								# Generated by us to know if this incoming or outgoing
							new_message_unread = "N",						# Generated by us to know if this messages is handled or not yet
						)
	MessageAckToDB.save()

	LogInput('New Message %s: %s[ServiceType=%s; MessageCode=%s; PortID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (MessageAckToDB.direction, MessageAck.MessageCode, MessageAck.ServiceType, MessageAck.MessageCode, MessageAck.PortID, MessageAck.OriginationID, MessageAck.DestinationID, MessageAckToDB.message_id, MessageAckToDB.time_stamp, MessageAckToDB.direction, MessageAckToDB.new_message_unread))

	return MessageAck	# we return MessageAck because we have made the changes up top >> MessageAck.MessageCode = "MessageAck"


# Storing the outgoing NpRequestAck message to database function and returning formed NpRequestAck
def SetNpRequestAck(InMessage):

	#LogInput('Starting the process of generating the outgoing message  SetNpRequestAck for %s' % InMessage.MessageCode)

	#Set NpRequestAck to be sent back to CS with the received information
	NpRequestAck = NpRequestAck_Type()
	#LogInput('Starting new NpRequestAck')

	NpRequestAck.ServiceType = InMessage.ServiceType
	NpRequestAck.MessageCode = "NpRequestAck"		# must be set to what type of message we are sending
	NpRequestAck.Number = InMessage.Number
	NpRequestAck.PortID = "LSCO-BTCF-20111206-00000"	# Bahaa we need to generate the port id
	NpRequestAck.SubmissionID = InMessage.SubmissionID
	NpRequestAck.DonorID = InMessage.DonorID
	NpRequestAck.RecipientID = InMessage.RecipientID
	NpRequestAck.OriginationID = GetConfig('ORIGINATION_ID')		## we are the the originator
	NpRequestAck.DestinationID = GetConfig('DESTINATION_ID')		## we are sending to the CS

	NpRequestAckToDB = NpMessages(
								time_stamp = datetime.datetime.now(),		# Generated by us to know when we sent this message
								service_type = NpRequestAck.ServiceType,		#
								message_code = NpRequestAck.MessageCode,		#
								number = NpRequestAck.Number,					#
								port_id = NpRequestAck.PortID,				# This optional we need to check if not passed by CS, then we generate it
								submission_id = NpRequestAck.SubmissionID,	# This mandatory and it is sent with NpRequest by CS
								donor_id = NpRequestAck.DonorID,
								recipient_id = NpRequestAck.RecipientID,		# This mandatory and it is sent with NpRequest by CS
								origination_id = NpRequestAck.OriginationID,	# This mandatory and it is sent with NpRequest by CS
								destination_id = NpRequestAck.DestinationID,	# This mandatory and it is sent with NpRequest by CS
								direction = "OUT",							# Generated by us to know if this incoming or outgoing
								new_message_unread = "N",					# Generated by us to know if this messages is handled or not yet
								#original_message = str(**NpRequestAck),	# We store the original full message as received
							)
	db_result = MessageAckToDB.save()

	LogInput('New Message: %s[ServiceType=%s; MessageCode=%s; Number=%s; SubmissionID=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpRequestAck.MessageCode, NpRequestAck.ServiceType, NpRequestAck.MessageCode, NpRequestAck.Number, NpRequestAck.SubmissionID, NpRequestAck.PortID, NpRequestAck.DonorID, NpRequestAck.RecipientID, NpRequestAck.OriginationID, NpRequestAck.DestinationID, NpRequestAckToDB.message_id, NpRequestAckToDB.time_stamp, NpRequestAckToDB.direction, NpRequestAckToDB.new_message_unread))

	return NpRequestAck	# we return MessageAck because we have made the changes up top >> MessageAck.MessageCode = "MessageAck"	

def ActUponNpDeactivateBroadcast(InMessage):

	## setting NpDeactivateComplete, ready for sending
	LogInput('Inside ActUponNpExecuteBroadcast  >  Starting new NpDeactivateComplete')
	NpDeactivateComplete = NpDeactivateComplete_Type()
	LogInput('ActUponNpDeactivateBroadcast  -  1')

	NpDeactivateComplete.ServiceType = InMessage.ServiceType
	NpDeactivateComplete.MessageCode = "NpDeactivateComplete"
	NpDeactivateComplete.Number = InMessage.Number
	NpDeactivateComplete.PortID = InMessage.PortID
	NpDeactivateComplete.BlockID = InMessage.BlockID
	LogInput('ActUponNpDeactivateBroadcast  -  2')
	NpDeactivateComplete.SubscriptionNetworkID = InMessage.SubscriptionNetworkID
	NpDeactivateComplete.OriginationID = GetConfig('ORIGINATION_ID')
	NpDeactivateComplete.DestinationID = GetConfig('DESTINATION_ID')
	LogInput('ActUponNpDeactivateBroadcast  -  3')

	## Storing outgoing NpDeactivateComplete
	NpDeactivateCompleteToDB = NpMessages(
								time_stamp = datetime.datetime.now(),		# Generated by us to know when we sent this message
								service_type = NpDeactivateComplete.ServiceType,		#
								message_code = NpDeactivateComplete.MessageCode,		#
								number = NpDeactivateComplete.Number,					#
								port_id = NpDeactivateComplete.PortID,				# This optional we need to check if not passed by CS, then we generate it
								block_id = NpDeactivateComplete.BlockID,
								new_route = NpDeactivateComplete.SubscriptionNetworkID,		# This mandatory and it is sent with NpRequest by CS
								origination_id = NpDeactivateComplete.OriginationID,	# This mandatory and it is sent with NpRequest by CS
								destination_id = NpDeactivateComplete.DestinationID,	# This mandatory and it is sent with NpRequest by CS
								direction = "OUT",							# Generated by us to know if this incoming or outgoing
								new_message_unread = "N",					# Generated by us to know if this messages is handled or not yet
							)
	LogInput('ActUponNpDeactivateBroadcast  -  4')

	#LogInput('Set Time Stamp  %s' % NpDeactivateCompleteToDB.time_stamp)

	LogInput('New Message Out: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; SubscriptionNetworkID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpDeactivateCompleteToDB.message_code, NpDeactivateCompleteToDB.service_type, NpDeactivateCompleteToDB.message_code, NpDeactivateCompleteToDB.number, NpDeactivateCompleteToDB.port_id, NpDeactivateCompleteToDB.new_route, NpDeactivateCompleteToDB.origination_id, NpDeactivateCompleteToDB.destination_id, NpDeactivateCompleteToDB.message_id, NpDeactivateCompleteToDB.time_stamp, NpDeactivateCompleteToDB.direction, NpDeactivateCompleteToDB.new_message_unread))

	LogInput('ActUponNpDeactivateBroadcast  -  5')

	#LogInput('Set Direction  %s' % NpDeactivateCompleteToDB.direction)
	#LogInput('Set New Message Unread  %s' % NpDeactivateCompleteToDB.new_message_unread)
	## This will send to the data base
	#LogInput('SAVING TO DATA BASE  %s' % NpDeactivateCompleteToDB.message_code)
	NpDeactivateCompleteToDB.save()
	#LogInput('SAVED')
	LogInput('ActUponNpDeactivateBroadcast  -  6')

	NpDeactivateCompleteDict = dict(
							ServiceType = NpDeactivateComplete.ServiceType,
							MessageCode = NpDeactivateComplete.MessageCode,
							Number = NpDeactivateComplete.Number,
							PortID = NpDeactivateComplete.PortID,
							BlockID = NpDeactivateComplete.BlockID,
							SubscriptionNetworkID = NpDeactivateComplete.SubscriptionNetworkID,
							OriginationID = NpDeactivateComplete.OriginationID,
							DestinationID = NpDeactivateComplete.DestinationID,
						)
	LogInput('ActUponNpDeactivateBroadcast  -  7')

	LogInput('ActUponNpDeactivateBroadcast  -  8')

	LogInput('___________________________  End of Outgoing %s  ___________________________' % NpDeactivateComplete.MessageCode)
	## Updating Lightspeed database
	#LogInput('___________________________  Updating Customer DB %s  ___________________________' % NpDeactivateComplete.MessageCode)
	if GetConfig("ENABLE_VOICEGATWAY_UPDATE") == "TRUE" or GetConfig("ENABLE_LOCALDB_UPDATE") == "TRUE":
		from voicegateway_update import UpdateVoiceGateway
		LogInput('ActUponNpDeactivateBroadcast  -  9')
	
		UpdateVoiceGateway(InMessage)
	else:
		LogInput('Update Voice Gateway is fully disabled')
		
	LogInput('ActUponNpDeactivateBroadcast  -  10')

	#LogInput('___________________________  End of Updating DBs %s  ___________________________' % NpDeactivateComplete.MessageCode)
	#LogInput('Printing NpExecute Dict ...%s',str(NpDeactivateCompleteDict))
	#LogInput('Starting the SEND process')
	#LogInput('___________________________  Outgoing %s  ___________________________' % NpDeactivateComplete.MessageCode)
	## Sending NpDeactivateComplete with suds
	send_parse_save("NpDeactivateComplete", NpDeactivateCompleteDict)


def ActUponNpExecuteBroadcast(InMessage):

	## setting NpExecuteComplete, ready for sending
	#LogInput('Inside ActUponNpExecuteBroadcast  >  Starting new NpExecuteComplete')
	NpExecuteComplete = NpExecuteComplete_Type()

	NpExecuteComplete.ServiceType = InMessage.ServiceType
	NpExecuteComplete.MessageCode = "NpExecuteComplete"
	NpExecuteComplete.Number = InMessage.Number
	NpExecuteComplete.PortID = InMessage.PortID
	NpExecuteComplete.DonorID = InMessage.DonorID
	NpExecuteComplete.RecipientID = InMessage.RecipientID
	NpExecuteComplete.OriginationID = GetConfig('ORIGINATION_ID')
	NpExecuteComplete.DestinationID = GetConfig('DESTINATION_ID')

	## Storing outgoing NpExecuteComplete
	NpExecuteCompleteToDB = NpMessages(
								time_stamp = datetime.datetime.now(),		# Generated by us to know when we sent this message
								service_type = NpExecuteComplete.ServiceType,		#
								message_code = NpExecuteComplete.MessageCode,		#
								number = NpExecuteComplete.Number,					#
								port_id = NpExecuteComplete.PortID,				# This optional we need to check if not passed by CS, then we generate it
								donor_id = NpExecuteComplete.DonorID,
								recipient_id = NpExecuteComplete.RecipientID,		# This mandatory and it is sent with NpRequest by CS
								origination_id = NpExecuteComplete.OriginationID,	# This mandatory and it is sent with NpRequest by CS
								destination_id = NpExecuteComplete.DestinationID,	# This mandatory and it is sent with NpRequest by CS
								direction = "OUT",							# Generated by us to know if this incoming or outgoing
								new_message_unread = "N",					# Generated by us to know if this messages is handled or not yet
							)

	#LogInput('Set Time Stamp  %s' % NpExecuteCompleteToDB.time_stamp)

	LogInput('New Message Out: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpExecuteCompleteToDB.message_code, NpExecuteCompleteToDB.service_type, NpExecuteCompleteToDB.message_code, NpExecuteCompleteToDB.number, NpExecuteCompleteToDB.port_id, NpExecuteCompleteToDB.donor_id, NpExecuteCompleteToDB.recipient_id, NpExecuteCompleteToDB.origination_id, NpExecuteCompleteToDB.destination_id, NpExecuteCompleteToDB.message_id, NpExecuteCompleteToDB.time_stamp, NpExecuteCompleteToDB.direction, NpExecuteCompleteToDB.new_message_unread))

	#LogInput('Set Direction  %s' % NpExecuteCompleteToDB.direction)
	#LogInput('Set New Message Unread  %s' % NpExecuteCompleteToDB.new_message_unread)
	## This will send to the data base
	#LogInput('SAVING TO DATA BASE  %s' % NpExecuteCompleteToDB.message_code)
	NpExecuteCompleteToDB.save()
	#LogInput('SAVED')

	NpExecuteCompleteDict = dict(
							ServiceType = NpExecuteComplete.ServiceType,
							MessageCode = NpExecuteComplete.MessageCode,
							Number = NpExecuteComplete.Number,
							PortID = NpExecuteComplete.PortID,
							DonorID = NpExecuteComplete.DonorID,
							RecipientID = NpExecuteComplete.RecipientID,
							OriginationID = NpExecuteComplete.OriginationID,
							DestinationID = NpExecuteComplete.DestinationID,
						)

	#LogInput('Printing NpExecute Dict ...%s',str(NpExecuteCompleteDict))
	#LogInput('Starting the SEND process')
	#LogInput('___________________________  Outgoing %s  ___________________________' % NpExecuteComplete.MessageCode)
	## Sending NpExecuteComplete with suds
	send_parse_save("NpExecuteComplete", NpExecuteCompleteDict)
	LogInput('___________________________  End of Outgoing %s  ___________________________' % NpExecuteComplete.MessageCode)
	## Updating Lightspeed database
	#LogInput('___________________________  Updating Customer DB %s  ___________________________' % NpExecuteComplete.MessageCode)
	if GetConfig("ENABLE_VOICEGATWAY_UPDATE") == "TRUE" or GetConfig("ENABLE_LOCALDB_UPDATE") == "TRUE":
		from voicegateway_update import UpdateVoiceGateway
		LogInput('ActUponNpDeactivateBroadcast  -  9')
	
		UpdateVoiceGateway(InMessage)
	else:
		LogInput('Update Voice Gateway is fully disabled')

	#LogInput('___________________________  End of Updating DBs %s  ___________________________' % NpExecuteComplete.MessageCode)

	

def ActUponNpRequestAccept(InMessage):
	## setting NpExecute, ready for sending
	LogInput('Inside ActUponNpRequestAccept  >  Starting new NpExecute')
	NpExecute = NpExecute_Type()
	NpExecute.ServiceType = InMessage.ServiceType
	NpExecute.MessageCode = "NpExecute"
	NpExecute.Number = InMessage.Number
	NpExecute.PortID = InMessage.PortID
	NpExecute.DonorID = InMessage.DonorID
	NpExecute.RecipientID = InMessage.RecipientID
	NpExecute.OriginationID = GetConfig('ORIGINATION_ID')
	NpExecute.DestinationID = GetConfig('DESTINATION_ID')

	## Storing outgoing NpExecute
	NpExecuteToDB = NpMessages(
								time_stamp = datetime.datetime.now(),		# Generated by us to know when we sent this message
								service_type = NpExecute.ServiceType,		#
								message_code = NpExecute.MessageCode,		#
								number = NpExecute.Number,					#
								port_id = NpExecute.PortID,				# This optional we need to check if not passed by CS, then we generate it
								donor_id = NpExecute.DonorID,
								recipient_id = NpExecute.RecipientID,		# This mandatory and it is sent with NpRequest by CS
								origination_id = NpExecute.OriginationID,	# This mandatory and it is sent with NpRequest by CS
								destination_id = NpExecute.DestinationID,	# This mandatory and it is sent with NpRequest by CS
								direction = "OUT",							# Generated by us to know if this incoming or outgoing
								new_message_unread = "N",					# Generated by us to know if this messages is handled or not yet
							)

	LogInput('New Message %s: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpExecuteToDB.direction, NpExecuteToDB.message_code, NpExecuteToDB.service_type, NpExecuteToDB.message_code, NpExecuteToDB.number, NpExecuteToDB.port_id, NpExecuteToDB.donor_id, NpExecuteToDB.recipient_id, NpExecuteToDB.origination_id, NpExecuteToDB.destination_id, NpExecuteToDB.message_id, NpExecuteToDB.time_stamp, NpExecuteToDB.direction, NpExecuteToDB.new_message_unread))

	## This will send to the data base
	#LogInput('SAVING TO DATA BASE  %s' % NpExecuteToDB.message_code)
	NpExecuteToDB.save()
	#LogInput('SAVED')

	NpExecuteDict = dict(
							ServiceType = NpExecute.ServiceType,
							MessageCode = NpExecute.MessageCode,
							Number = NpExecute.Number,
							PortID = NpExecute.PortID,
							DonorID = NpExecute.DonorID,
							RecipientID = NpExecute.RecipientID,
							OriginationID = NpExecute.OriginationID,
							DestinationID = NpExecute.DestinationID,
						)

	#LogInput('Printing NpExecute Dict ...%s',str(NpExecuteDict))
	LogInput('___________________________  Outgoing %s  ___________________________' % NpExecute.MessageCode)
	## Sending NpExecute with suds
	send_parse_save("NpExecute", NpExecuteDict)
	LogInput('___________________________  End of Outgoing %s  ___________________________' % NpExecute.MessageCode)

	## Finding the NpRequest that relates to NpRequestCancel
	try:
		NpRequestEntry = NpMessages.objects.get(message_code ="NpRequest", port_id = InMessage.PortID)
		
		LogInput('Found Message: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpRequestEntry.message_code, NpRequestEntry.service_type, NpRequestEntry.message_code, NpRequestEntry.number, NpRequestEntry.port_id, NpRequestEntry.donor_id, NpRequestEntry.recipient_id, NpRequestEntry.origination_id, NpRequestEntry.destination_id, NpRequestEntry.message_id, NpRequestEntry.time_stamp, NpRequestEntry.direction, NpRequestEntry.new_message_unread))

		## Updateing the NpRequest with unread
		#old_new_message_unread = NpRequestEntry.new_message_unread
		NpRequestEntry.new_message_unread = "N"
		NpRequestEntry.save()
		
		#LogInput('Updating %s # %s [new_message_unread = %s TO new_message_unread = %s]' % (NpRequestEntry.message_code,NpRequestEntry.message_id,old_new_message_unread,NpRequestEntry.new_message_unread))
		## This will send to the data base
		LogInput('Updated Message: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpRequestEntry.message_code, NpRequestEntry.service_type, NpRequestEntry.message_code, NpRequestEntry.number, NpRequestEntry.port_id, NpRequestEntry.donor_id, NpRequestEntry.recipient_id, NpRequestEntry.origination_id, NpRequestEntry.destination_id, NpRequestEntry.message_id, NpRequestEntry.time_stamp, NpRequestEntry.direction, NpRequestEntry.new_message_unread))
	except:
		LogInput("Message NpRequest was not found in Database; Message[MessageCode=NpRequest; PortID=%s]" % InMessage.PortID)


def ActUponNpRequestCancel(InMessage):
	## setting NpRequestCancel, ready for sending
	#LogInput('Inside ActUponNpRequestCancel')
	## Finding the NpRequest that relates to NpRequestCancel
	try:
		NpRequestEntry = NpMessages.objects.get(message_code ="NpRequest", port_id = InMessage.PortID)
		
		LogInput('Found Message: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpRequestEntry.message_code, NpRequestEntry.service_type, NpRequestEntry.message_code, NpRequestEntry.number, NpRequestEntry.port_id, NpRequestEntry.donor_id, NpRequestEntry.recipient_id, NpRequestEntry.origination_id, NpRequestEntry.destination_id, NpRequestEntry.message_id, NpRequestEntry.time_stamp, NpRequestEntry.direction, NpRequestEntry.new_message_unread))

		## Updateing the NpRequest with unread
		#old_new_message_unread = NpRequestEntry.new_message_unread
		NpRequestEntry.new_message_unread = "N"
		NpRequestEntry.save()
		
		#LogInput('Updating %s # %s [new_message_unread = %s TO new_message_unread = %s]' % (NpRequestEntry.message_code,NpRequestEntry.message_id,old_new_message_unread,NpRequestEntry.new_message_unread))
		## This will send to the data base
		LogInput('Updated Message: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpRequestEntry.message_code, NpRequestEntry.service_type, NpRequestEntry.message_code, NpRequestEntry.number, NpRequestEntry.port_id, NpRequestEntry.donor_id, NpRequestEntry.recipient_id, NpRequestEntry.origination_id, NpRequestEntry.destination_id, NpRequestEntry.message_id, NpRequestEntry.time_stamp, NpRequestEntry.direction, NpRequestEntry.new_message_unread))
	except:
		LogInput("Message NpRequest was not found in Database; Message[MessageCode=NpRequest; PortID=%s]" % InMessage.PortID)



def ActUponNpRequestReject(InMessage):
	## setting NpRequestReject, ready for sending
	#LogInput('Inside ActUponNpRequestReject')
	## Finding the NpRequest that relates to NpRequestReject
	try:
		NpRequestEntry = NpMessages.objects.get(message_code ="NpRequest", port_id = InMessage.PortID)

		LogInput('Found Message: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpRequestEntry.message_code, NpRequestEntry.service_type, NpRequestEntry.message_code, NpRequestEntry.number, NpRequestEntry.port_id, NpRequestEntry.donor_id, NpRequestEntry.recipient_id, NpRequestEntry.origination_id, NpRequestEntry.destination_id, NpRequestEntry.message_id, NpRequestEntry.time_stamp, NpRequestEntry.direction, NpRequestEntry.new_message_unread))

		## Updateing the NpRequest with unread
		old_new_message_unread = NpRequestEntry.new_message_unread		#this is only for the logger
		NpRequestEntry.new_message_unread = "N"
		NpRequestEntry.save()
	
		#LogInput('Updating %s # %s [new_message_unread = %s TO new_message_unread = %s]' % (NpRequestEntry.message_code,NpRequestEntry.message_id,old_new_message_unread,NpRequestEntry.new_message_unread))

		## This will send to the data base
		LogInput('Updated Message: %s[ServiceType=%s; MessageCode=%s; Number=%s; PortID=%s; DonorID=%s; RecipientID=%s; OriginationID=%s; DestinationID=%s], DB[MessageID=%s; Time=%s; Direction=%s; New=%s]' % (NpRequestEntry.message_code, NpRequestEntry.service_type, NpRequestEntry.message_code, NpRequestEntry.number, NpRequestEntry.port_id, NpRequestEntry.donor_id, NpRequestEntry.recipient_id, NpRequestEntry.origination_id, NpRequestEntry.destination_id, NpRequestEntry.message_id, NpRequestEntry.time_stamp, NpRequestEntry.direction, NpRequestEntry.new_message_unread))

	except:
		LogInput("Message NpRequest was not found in Database; Message[MessageCode=NpRequest; PortID=%s]" % InMessage.PortID)